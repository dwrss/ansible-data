---

- hosts: docker_hosts
  roles:
    - docker-host
  tasks:
    - name: define key file paths
      set_fact:
        docker_host_key: "{{ [docker_host_dot_dir, '/', ansible_fqdn, '-key.pem'] | join('') | expanduser | realpath | quote }}"
        docker_host_server_cert: "{{ [docker_host_dot_dir, '/', ansible_fqdn, '-server-cert.pem'] | join('') | expanduser | realpath | quote }}"
        docker_host_client_cert: "{{ [docker_host_dot_dir, '/', ansible_fqdn, '-client-cert.pem'] | join('') | expanduser | realpath | quote }}"

    - name: create docker dot dir
      file:
        path: '{{ docker_host_dot_dir }}'
        state: directory
        mode: 0700

    - name: generate host private key
      command: >
        openssl genrsa
        -out {{ docker_host_key }}
        4096
      args:
        creates: '{{ docker_host_key }}'

    - name: set host private key mode
      file:
        path: '{{ docker_host_key }}'
        mode: 0400

    - name: create server CSR
      command: >
        openssl req
        -subj "/CN={{ ansible_fqdn }}" -sha256 -new
        -key {{ docker_host_key }}
        -out {{ docker_host_server_cert }}.csr
      args:
        creates: '{{ docker_host_server_cert }}.csr'

    - name: fetch server CSR
      fetch:
        dest: "{{ hostvars['localhost'].docker_host_dot_dir }}/"
        src: "{{ docker_host_server_cert }}.csr"
        flat: yes

    - name: create server extfile
      shell: echo subjectAltName = DNS:{{ ansible_fqdn }},IP:{{ ansible_default_ipv4.address }},IP:127.0.0.1 > {{ docker_host_server_cert }}.extfile.cnf
      args:
        creates: "{{ docker_host_server_cert }}.extfile.cnf"

    - name: fetch server extfile
      fetch:
        dest: "{{ hostvars['localhost'].docker_host_dot_dir }}/"
        src: "{{ docker_host_server_cert }}.extfile.cnf"
        flat: yes

    - name: create client CSR
      command: >
        openssl req
        -subj '/CN=client' -new
        -key {{ docker_host_key }}
        -out {{ docker_host_client_cert }}.csr
      args:
        creates: '{{ docker_host_client_cert }}.csr'

    - name: fetch client CSR
      fetch:
        dest: "{{ hostvars['localhost'].docker_host_dot_dir }}/"
        src: "{{ docker_host_client_cert }}.csr"
        flat: yes

    - name: create client extfile
      shell: echo extendedKeyUsage = clientAuth > {{ docker_host_client_cert }}.extfile.cnf
      args:
        creates: '{{ docker_host_client_cert }}.extfile.cnf'

    - name: fetch client extfile
      fetch:
        dest: "{{ hostvars['localhost'].docker_host_dot_dir }}/"
        src: "{{ docker_host_client_cert }}.extfile.cnf"
        flat: yes

- hosts: localhost
  gather_facts: yes
  tasks:
    - name: define CA key file paths
      set_fact:
        docker_host_ca_key: "{{ [docker_host_dot_dir, '/', ansible_fqdn, '-ca-key.pem'] | join('') | realpath | quote }}"
        docker_host_ca_cert: "{{ [docker_host_dot_dir, '/', ansible_fqdn, '-ca-cert.pem'] | join('') | expanduser | realpath | quote }}"

    - name: create docker dot dir
      file:
        path: '{{ docker_host_dot_dir }}'
        state: directory
        mode: 0700

    - name: generate CA private key
      command: >
        openssl genrsa -aes256
        -passout pass:{{ ca_password }}
        -out {{ docker_host_ca_key }} 4096
      args:
        creates: '{{ docker_host_ca_key }}'

    - name: set CA private key mode
      file:
        path: '{{ docker_host_ca_key }}'
        mode: 0400

    - name: generate CA public key
      command: >
        openssl req -new -x509 -days 365
        -key {{ docker_host_ca_key }} -sha256
        -out {{ docker_host_ca_cert }}
        -passin pass:{{ ca_password }}
        -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ organizational_unit }}/CN={{ ansible_fqdn }}/emailAddress={{ email }}"
      args:
        creates: '{{ docker_host_ca_cert }}'

    - name: set CA public key mode
      file:
        path: '{{ docker_host_ca_cert }}'
        mode: 0444

    - name: create signed server public key
      command: >
        openssl x509 -req -days 365 -sha256
        -in {{ docker_host_dot_dir}}/{{ hostvars[item].docker_host_server_cert | basename }}.csr
        -CA {{ docker_host_ca_cert }}
        -CAkey {{ docker_host_ca_key }} -CAcreateserial
        -out {{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_server_cert | basename }}
        -extfile {{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_server_cert | basename }}.extfile.cnf
        -passin pass:{{ ca_password }}
      args:
        creates: '{{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_server_cert | basename }}'
      with_inventory_hostnames: docker_hosts

    - name: create signed client public key
      command: >
        openssl x509 -req -days 365 -sha256
        -in {{ docker_host_dot_dir}}/{{ hostvars[item].docker_host_client_cert | basename }}.csr
        -CA {{ docker_host_ca_cert }}
        -CAkey {{ docker_host_ca_key }} -CAcreateserial
        -out {{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_client_cert | basename }}
        -extfile {{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_client_cert | basename }}.extfile.cnf
        -passin pass:{{ ca_password }}
      args:
        creates: '{{ docker_host_dot_dir }}/{{ hostvars[item].docker_host_client_cert | basename }}'
      with_inventory_hostnames: docker_hosts

    - name: find certificates
      find:
        paths: "{{ docker_host_dot_dir }}"
        patterns: "*-cert.pem"
      register: certificates

    - name: set client and server public keys mode
      file:
        path: '{{ item.path }}'
        mode: 0444
      with_items:
        - '{{ certificates.files }}'

- hosts: docker_hosts
  tasks:
    - name: copy CA certificate
      copy:
        dest: "{{ docker_host_dot_dir }}/{{ hostvars['localhost'].docker_host_ca_cert | basename }}"
        src: "{{ hostvars['localhost'].docker_host_ca_cert }}"

    - name: copy client certificate
      copy:
        dest: "{{ docker_host_client_cert }}"
        src: "{{ hostvars['localhost'].docker_host_dot_dir }}/{{ docker_host_client_cert | basename }}"

    - name: copy server certificate
      copy:
        dest: "{{ docker_host_server_cert }}"
        src: "{{ hostvars['localhost'].docker_host_dot_dir }}/{{ docker_host_server_cert | basename }}"

    - name: find CSR and cnf files
      find:
        paths: "{{ docker_host_dot_dir }}"
        patterns: "*.csr,*.cnf"
      register: results

    - name: delete CSR and cnf files
      file:
        path: '{{ item.path }}'
        state: absent
      with_items:
        - '{{ results.files }}'

